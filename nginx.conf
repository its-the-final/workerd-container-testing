user  nginx;
worker_processes  1;

error_log  /dev/stderr warn;
pid        /var/run/nginx.pid;

 #include /etc/nginx/modules/http_redis2.conf;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
	##resolver 4.2.2.4 8.8.8.8 1.1.1.1 9.9.9.9 ipv6=off valid=90m;
    resolver 127.0.0.1 ipv6=off valid=90m;

    log_format  main  '$remote_addr - $remote_user [$time_local] ( $proxy_host $upstream_http_host $upstream_addr  $upstream_response_time msec $msec request_time $request_time) "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;

    proxy_force_ranges on;
    proxy_cache_path /cache levels=1:2 keys_zone=my_cache:10m max_size=1g
                    inactive=$MAX_INACTIVE use_temp_path=off;
    map $sent_http_content_type $cacheable_types {
      "image/gif"    "max-age=864000";
       "image/jpeg"  "max-age=864000";
       ~image/         10d;
       default       "";
    }
    map $sent_http_content_type $expires {
      default         off;
      application/pdf 1h;
      ~image/         10d;
    }
    upstream getbackend {

        keepalive 100;

           server MYUPSTREAM:MYPORT max_fails=2 fail_timeout=5s;
           #more_backends
    }
    upstream redisbackend {
        server 127.0.0.1:6379;
        # a pool with at most 1024 connections
        # and do not distinguish the servers:
        keepalive 1024;
    }

    proxy_ssl_verify              off;
    proxy_ssl_server_name on;
	proxy_ssl_name        $upstream_addr;
    proxy_set_header Host $proxy_host;
    server {
    resolver 127.0.0.1 ipv6=off valid=90m;
	listen 80;
    access_log  /dev/stdout  main;

	location /healthcheck {
            access_log  /dev/null;
          default_type text/plain;
             return 200 '200 OK == alive';
             # because default content-type is application/octet-stream,browser will offer to "save the file"... if you want to see reply in browser, uncomment next line 
             add_header Content-Type text/plain;
             }
	location /__scheduled {
            access_log  /dev/null;
          default_type text/plain;
             return 200 '200 OK == alive';
             # because default content-type is application/octet-stream,browser will offer to "save the file"... if you want to see reply in browser, uncomment next line 
             add_header Content-Type text/plain;
             }
        location /favicon.ico {
        return      301 "https://workers.cloudflare.com/favicon.ico";
		}
        #location / {
        #set $redis_key $uri;
#
        # redis_pass redisbackend;
        ##redis2_pass redisbackend;
        #default_type   text/html;
        #error_page     404 = /catchme;
        #}
        location / {

              proxy_connect_timeout  42;
              # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
              proxy_http_version 1.1;
              # Remove the Connection header if the client sends it,
              # it could be "close" to close a keepalive connection
              proxy_set_header Connection "";
            #resolver 127.0.0.11 valid=10s;
            #set $backend MYUPSTREAM; 
	        proxy_ignore_headers X-Accel-Expires;
            proxy_ignore_headers Expires;
            proxy_ignore_headers Cache-Control;
            proxy_ignore_headers Set-Cookie;
            #proxy_ssl_name $proxy_host;
            proxy_ssl_session_reuse on;
            proxy_hide_header X-Accel-Expires;
            proxy_hide_header Expires;
            proxy_hide_header Cache-Control;
            proxy_hide_header Pragma;
            proxy_hide_header Host;
            add_header Host $http_host;
            add_header "Cache-Control" $cacheable_types;
	    #add_header "Expires" $expires;
	    expires $expires;
                etag off;
                if_modified_since off;
            #proxy_redirect $backend /
            #proxy_pass $backend;
           # set $empty "";
           # proxy_pass UPSTREAM_PROTO://backend$empty;
            proxy_pass http://getbackend;
            #proxy_redirect default;
	   #if ($upstream_status = 401) {
       #        
       #    }
            proxy_cache my_cache;
            proxy_read_timeout 90s;
                        # Enable caching with Redis
            proxy_cache_revalidate on;
            proxy_cache_lock on;
            ###proxy_cache_use_stale updating;
            ###proxy_cache_background_update on;
            ###proxy_cache_key "$scheme$request_method$host$request_uri";
            ###proxy_cache_bypass $http_upgrade;
            ###proxy_cache_valid any 5m;
            ###proxy_cache redis_cache;
            ###proxy_cache_redis unix:/var/run/redis/redis.sock;
            PROXY_CACHE_VALID
            add_header 'Access-Control-Allow-Origin' 'ALLOWED_ORIGIN';
        }
    }
}